const fs = require('fs');
const path = require('path');
const { LEARNED_RESPONSES_PATH } = require('../config/constants');

function renderGamePage(req, res, botState) {
    const gameID = req.params.gameID;
    const game = botState.mafiaGames[gameID];
    
    if (!game || !game.active) {
        return res.render('error', { message: 'ЁЯЪл рдЧреЗрдо рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рдЦрддреНрдо рд╣реЛ рдЪреБрдХрд╛ рд╣реИ! ЁЯХЙя╕П' });
    }

    res.render('loading', { gameID });
}

function handleAuth(req, res, botState) {
    const gameID = req.params.gameID;
    let userID = req.body.userID ? req.body.userID.trim() : '';
    const game = botState.mafiaGames[gameID];

    if (!game || !game.active) {
        return res.render('error', { message: 'ЁЯЪл рдЧреЗрдо рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рдЦрддреНрдо рд╣реЛ рдЪреБрдХрд╛ рд╣реИ! ЁЯХЙя╕П' });
    }

    if (!userID || !game.players[userID]) {
        return res.render('error', { message: 'ЁЯЪл рдЧрд▓рдд UID рдпрд╛ рдпреВрдЬрд░ рдЧреЗрдо рдореЗрдВ рдирд╣реАрдВ рд╣реИ! ЁЯХЙя╕П' });
    }

    res.redirect(`/mafia/${gameID}/role?uid=${userID}`);
}

function renderRolePage(req, res, botState) {
    const gameID = req.params.gameID;
    const userID = req.query.uid;
    const game = botState.mafiaGames[gameID];

    if (!game || !game.active) {
        return res.render('error', { message: 'ЁЯЪл рдЧреЗрдо рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рдЦрддреНрдо рд╣реЛ рдЪреБрдХрд╛ рд╣реИ! ЁЯХЙя╕П' });
    }

    if (!userID || !game.players[userID]) {
        return res.render('error', { message: 'ЁЯЪл рдЧрд▓рдд UID рдпрд╛ рдпреВрдЬрд░ рдЧреЗрдо рдореЗрдВ рдирд╣реАрдВ рд╣реИ! ЁЯХЙя╕П' });
    }

    const player = game.players[userID];
    const isAlive = game.alive.has(userID);
    const roleActions = {
        Mafia: { action: 'eliminate', description: 'рдХрд┐рд╕реА рдХреЛ рдорд╛рд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЪреБрдиреЗрдВред ЁЯШИ' },
        Doctor: { action: 'save', description: 'рдХрд┐рд╕реА рдХреЛ рдмрдЪрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЪреБрдиреЗрдВред ЁЯй║' },
        Detective: { action: 'check', description: 'рдХрд┐рд╕реА рдХреА рднреВрдорд┐рдХрд╛ рдЬрд╛рдБрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдЪреБрдиреЗрдВуАВ ЁЯФО' },
        Villager: { action: null, description: 'рдЖрдкрдХрд╛ рдХрд╛рдо рдпрд╣рд╛рдБ рдирд╣реАрдВ, рдЧреНрд░реБрдк рдореЗрдВ рд╣реИред рдЧреНрд░реБрдк рдореЗрдВ рд░рд╣рдХрд░ рдЕрдкрдиреЗ рджрд┐рдорд╛рдЧ рд╕реЗ рдкрддрд╛ рд▓рдЧрд╛рдУ рдорд╛рдлрд┐рдпрд╛ рдХреМрди рд╣реИ рдФрд░ рд╕рдмрдХреЛ convince рдХрд░реЛ рдХрд┐ рдпреЗ рдорд╛рдлрд┐рдпрд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ рддрд╛рдХрд┐ рд╕рдм рд╡реЛрдЯ рджреЗрдХрд░ рдЙрд╕реЗ eliminate рдХрд░ рджреЗрдВред ЁЯзС' }
    };
    const currentAction = roleActions[player.role];

    const validPlayers = Object.keys(game.players)
        .filter(id => id !== userID && game.alive.has(id))
        .map(id => ({ id, name: game.players[id].name || `Player_${id}` }));

    const actionResult = game.results && game.results[userID] ? game.results[userID] : null;

    res.render('role', {
        gameID,
        userID,
        role: player.role,
        name: player.name || `Player_${userID}`,
        isAlive,
        phase: game.phase,
        action: currentAction.action,
        actionDescription: currentAction.description,
        players: validPlayers,
        botState,
        message: actionResult || null
    });
}

function handleAction(req, res, botState) {
    const gameID = req.params.gameID;
    const userID = req.body.userID;
    const targetID = req.body.targetID;
    const game = botState.mafiaGames[gameID];

    if (!game || !game.active) {
        return res.json({ success: false, message: 'ЁЯЪл рдЧреЗрдо рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рдЦрддреНрдо рд╣реЛ рдЪреБрдХрд╛ рд╣реИ! ЁЯХЙя╕П' });
    }

    if (!userID || !game.players[userID] || !game.alive.has(userID)) {
        return res.json({ success: false, message: 'ЁЯЪл рдпреВрдЬрд░ рдЧреЗрдо рдореЗрдВ рдирд╣реАрдВ рд╣реИ рдпрд╛ рдорд░ рдЪреБрдХрд╛ рд╣реИ! ЁЯХЙя╕П' });
    }

    if (game.phase !== 'night') {
        return res.json({ success: false, message: 'ЁЯЪл рдЕрднреА рдирд╛рдЗрдЯ рдлреЗрдЬ рдирд╣реАрдВ рд╣реИ! ЁЯХЙя╕П' });
    }

    const player = game.players[userID];
    game.results = game.results || {};

    if (player.role === 'Mafia') {
        game.actions.mafia = game.actions.mafia || [];
        game.actions.mafia.push(targetID);
        game.results[userID] = `ЁЯШИ рддреБрдордиреЗ ${game.players[targetID].name || `Player_${targetID}`} рдХреЛ рдорд╛рд░рдиреЗ рдХрд╛ рдкреНрд▓рд╛рди рдмрдирд╛рдпрд╛ред`;
    } else if (player.role === 'Doctor') {
        game.actions.doctor = targetID;
        game.results[userID] = `ЁЯй║ рдЖрдкрдиреЗ ${game.players[targetID].name || `Player_${targetID}`} рдХреЛ рдЖрдЬ рд░рд╛рдд рдХреЗ рд▓рд┐рдП save рдХрд░ рджрд┐рдпрд╛ред рдЖрдЬ рдорд╛рдлрд┐рдпрд╛ рдЗрд╕реЗ рдирд╣реАрдВ рдорд╛рд░ рдкрд╛рдПрдЧрд╛ред`;
    } else if (player.role === 'Detective') {
        const checkedRole = game.players[targetID].role === 'Mafia' ? 'Mafia рд╣реИ' : 'Mafia рдирд╣реАрдВ рд╣реИ';
        game.actions.detective = targetID;
        game.results[userID] = `ЁЯФО ${game.players[targetID].name || `Player_${targetID}`} ${checkedRole}ред`;
    } else {
        return res.json({ success: false, message: 'ЁЯЪл рдЧрд▓рдд рдПрдХреНрд╢рди рдпрд╛ рд░реЛрд▓! ЁЯХЙя╕П' });
    }

    try {
        fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
        console.log(`[MAFIA] Action recorded for ${userID} in game ${gameID}`);
    } catch (err) {
        console.error(`[MAFIA-ERROR] Failed to save action: ${err.message}`);
    }
    
    res.json({ success: true, message: 'тЬЕ рдПрдХреНрд╢рди рд░рдЬрд┐рд╕реНрдЯрд░ рд╣реЛ рдЧрдпрд╛! рд░рд┐рдЬрд▓реНрдЯ рдиреАрдЪреЗ рджреЗрдЦреЗрдВред ЁЯХЙя╕П' });
}

module.exports = {
    renderGamePage,
    handleAuth,
    renderRolePage,
    handleAction
};
