const fs = require('fs');
const { LEARNED_RESPONSES_PATH } = require('../../config/constants'); // ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡•ã‡§°‡§º‡§æ

module.exports = {
  name: 'mafia',
  aliases: ['mafiagame'],
  description: '‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à! üé≠',
  execute(api, threadID, args, event, botState, isMaster) {
    const command = args[0] ? args[0].toLowerCase() : '';
    botState.mafiaGames = botState.mafiaGames || {};

    if (command === 'start') {
      if (!isMaster) return api.sendMessage('üö´ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à! üïâÔ∏è', threadID);
      const gameID = Math.random().toString(36).substring(2, 8);
      botState.mafiaGames[gameID] = { players: {}, phase: 'join', active: true, actions: {}, votes: {}, alive: new Set() };
      fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
      api.sendMessage('üïπÔ∏è ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ! ‡§ú‡•ã-‡§ú‡•ã ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§≤‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, #mafia join ‡§≤‡§ø‡§ñ‡•ã‡•§ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 4 ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§ó‡§æ‡•§ üòé', threadID);
    } else if (command === 'join') {
      const gameID = Object.keys(botState.mafiaGames).find(id => botState.mafiaGames[id].phase === 'join' && botState.mafiaGames[id].active);
      if (!gameID) return api.sendMessage('üö´ ‡§ï‡•ã‡§à ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü! #mafia start ‡§ï‡§∞‡•ã‡•§ üïâÔ∏è', threadID);
      api.getUserInfo(event.senderID, (err, ret) => {
        if (err) return api.sendMessage('‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§ üïâÔ∏è', threadID);
        const name = ret[event.senderID].name || 'Player';
        if (botState.mafiaGames[gameID].players[event.senderID]) {
          return api.sendMessage('üö´ ‡§§‡•Å‡§Æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ú‡•â‡§á‡§® ‡§π‡•ã ‡§ö‡•Å‡§ï‡•á ‡§π‡•ã! üïâÔ∏è', threadID);
        }
        botState.mafiaGames[gameID].players[event.senderID] = { name, role: null };
        botState.mafiaGames[gameID].alive.add(event.senderID);
        fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
        api.sendMessage(`‚úÖ @${name}, ‡§§‡•Å‡§Æ ‡§ó‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã ‡§ó‡§è! ‡§Ö‡§≠‡•Ä ${Object.keys(botState.mafiaGames[gameID].players).length} ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§π‡•à‡§Ç‡•§ üéâ`, threadID);
        if (Object.keys(botState.mafiaGames[gameID].players).length >= 4) {
          api.sendMessage('üîî 4+ ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§ú‡•â‡§á‡§® ‡§π‡•ã ‡§ó‡§è! ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞, #mafia begin ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•ã‡•§ üòé', threadID);
        }
      });
    } else if (command === 'begin') {
      if (!isMaster) return api.sendMessage('üö´ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à! üïâÔ∏è', threadID);
      const gameID = Object.keys(botState.mafiaGames).find(id => botState.mafiaGames[id].phase === 'join' && botState.mafiaGames[id].active);
      if (!gameID || Object.keys(botState.mafiaGames[gameID].players).length < 4) {
        return api.sendMessage('‚ö†Ô∏è ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 4 ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§ö‡§æ‡§π‡§ø‡§è! üïâÔ∏è', threadID);
      }
      assignRoles(botState, gameID);
      botState.mafiaGames[gameID].phase = 'night';
      fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
      api.sendMessage('üïπÔ∏è ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ! ‡§∏‡§¨ ‡§≤‡•ã‡§ó ‡§á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ú‡§æ‡§ï‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§∞‡•ã‡§≤ ‡§¶‡•á‡§ñ ‡§≤‡•ã: https://shelendr-hinduu-kaa-gulaam-raam-kishor.onrender.com/mafia/' + gameID + '‡•§ 5 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§µ‡•á‡§ü ‡§ï‡§∞‡•ã, ‡§¨‡•â‡§ü ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ UID ‡§ö‡•á‡§ï ‡§ï‡§∞‡§ï‡•á ‡§∞‡•ã‡§≤ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§ó‡§æ‡•§ üåô ‡§®‡§æ‡§á‡§ü ‡§´‡•á‡§ú ‡§∂‡•Å‡§∞‡•Ç, 3 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§è‡§ï‡•ç‡§∂‡§® ‡§ö‡•Å‡§®‡•ã! üòà', threadID);
      setTimeout(() => {
        if (botState.mafiaGames[gameID]?.active) {
          api.sendMessage('üîî ‡§ï‡•Å‡§õ ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§¨‡§æ‡§ï‡•Ä ‡§π‡•à‡§Ç, 1 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ú‡§æ‡§ï‡§∞ ‡§è‡§ï‡•ç‡§∂‡§® ‡§ö‡•Å‡§®‡•ã!', threadID);
        }
        setTimeout(() => processNightPhase(api, threadID, gameID, botState), 60000);
      }, 120000);
    } else if (command === 'eliminate') {
      const gameID = Object.keys(botState.mafiaGames).find(id => botState.mafiaGames[id].phase === 'day' && botState.mafiaGames[id].active);
      if (!gameID) return api.sendMessage('üö´ ‡§Ö‡§≠‡•Ä ‡§°‡•á ‡§´‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à! üïâÔ∏è', threadID);
      const targetID = Object.keys(event.mentions)[0];
      if (!targetID || !botState.mafiaGames[gameID].players[targetID]) {
        return api.sendMessage('‚ö†Ô∏è ‡§ó‡§≤‡§§ ‡§Ø‡•Ç‡§ú‡§∞! ‡§ó‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§ï‡•ã ‡§Æ‡•á‡§Ç‡§∂‡§® ‡§ï‡§∞‡•ã‡•§ üïâÔ∏è', threadID);
      }
      if (botState.mafiaGames[gameID].votes[event.senderID]) {
        return api.sendMessage('üö´ ‡§§‡•Å‡§Æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§µ‡•ã‡§ü ‡§ï‡§∞ ‡§ö‡•Å‡§ï‡•á ‡§π‡•ã! üïâÔ∏è', threadID);
      }
      botState.mafiaGames[gameID].votes[event.senderID] = targetID;
      fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
      api.getUserInfo([event.senderID, targetID], (err, ret) => {
        if (err) return api.sendMessage('‚ö†Ô∏è ‡§®‡§æ‡§Æ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§ üïâÔ∏è', threadID);
        const senderName = ret[event.senderID].name || 'Player';
        const targetName = ret[targetID].name || 'Player';
        api.sendMessage(`‚úÖ @${senderName}, ‡§§‡•Å‡§Æ‡§®‡•á @${targetName} ‡§ï‡•ã ‡§µ‡•ã‡§ü ‡§ï‡§ø‡§Ø‡§æ! üéØ`, threadID);
      });
    } else if (command === 'stop') {
      const gameID = Object.keys(botState.mafiaGames).find(id => botState.mafiaGames[id].active);
      if (!gameID) return api.sendMessage('üö´ ‡§ï‡•ã‡§à ‡§ó‡•á‡§Æ ‡§ö‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§∞‡§π‡§æ! üïâÔ∏è', threadID);
      delete botState.mafiaGames[gameID];
      fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
      api.sendMessage('üõë ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! üïâÔ∏è', threadID);
    } else {
      api.sendMessage('‚ùå ‡§Ø‡•Ç‡§ú: #mafia start, #mafia join, #mafia begin, #mafia eliminate @user, #mafia stop üïâÔ∏è', threadID);
    }
  }
};

function assignRoles(botState, gameID) {
  const players = Object.keys(botState.mafiaGames[gameID].players);
  const count = players.length;
  const mafiaCount = (count >= 8 && count <= 12) ? 2 : (count >= 4 && count <= 7) ? 1 : 0;
  const roles = [];
  for (let i = 0; i < mafiaCount; i++) roles.push('Mafia');
  roles.push('Doctor');
  roles.push('Detective');
  for (let i = 0; i < count - mafiaCount - 2; i++) roles.push('Villager');
  players.sort(() => Math.random() - 0.5).forEach((id, i) => {
    botState.mafiaGames[gameID].players[id].role = roles[i];
  });
  console.log('[DEBUG] Assigned roles for game ' + gameID);
}

function processNightPhase(api, threadID, gameID, botState) {
  const game = botState.mafiaGames[gameID];
  if (!game || !game.active) return;
  let result = 'üåô ‡§®‡§æ‡§á‡§ü ‡§´‡•á‡§ú ‡§ñ‡§§‡•ç‡§Æ‡•§ ';
  let target = null;
  if (game.actions.mafia && game.actions.mafia.length > 0) {
    const voteCounts = {};
    game.actions.mafia.forEach(id => voteCounts[id] = (voteCounts[id] || 0) + 1);
    target = Object.keys(voteCounts).reduce((a, b) => voteCounts[a] > voteCounts[b] ? a : b, null);
  }
  if (target && target !== game.actions.doctor) {
    game.alive.delete(target);
    result += `@${game.players[target].name} ‡§Æ‡§∞ ‡§ó‡§Ø‡§æ! ‡§µ‡•ã ${game.players[target].role} ‡§•‡§æ‡•§`;
  } else if (target) {
    result += 'Doctor ‡§®‡•á ‡§¨‡§ö‡§æ ‡§≤‡§ø‡§Ø‡§æ! ‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§∞‡§æ‡•§';
  } else {
    result += '‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§∞‡§æ‡•§';
  }
  if (game.actions.detective) {
    const checkedRole = game.players[game.actions.detective].role === 'Mafia' ? 'Mafia ‡§π‡•à' : 'Mafia ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à';
    const detectiveID = Object.keys(game.players).find(id => game.players[id].role === 'Detective');
    api.sendMessage(`üîé @${game.players[game.actions.detective].name} ${checkedRole}‡•§ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§¶‡•á‡§ñ‡•ã‡•§`, detectiveID);
  }
  game.phase = 'day';
  game.votes = {};
  game.actions = { mafia: [], doctor: null, detective: null };
  fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
  api.sendMessage(result + '\n‚òÄÔ∏è ‡§°‡•á ‡§´‡•á‡§ú ‡§∂‡•Å‡§∞‡•Ç! #mafia eliminate @user ‡§∏‡•á ‡§µ‡•ã‡§ü ‡§ï‡§∞‡•ã (3 ‡§Æ‡§ø‡§®‡§ü)‡•§ üòé', threadID);
  setTimeout(() => {
    if (game.active) {
      const missing = Array.from(game.alive).filter(id => !game.votes[id]);
      if (missing.length > 0) {
        api.sendMessage(`üîî @${missing.map(id => game.players[id].name).join(', ')}, 20 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§µ‡•ã‡§ü ‡§ï‡§∞‡•ã, ‡§µ‡§∞‡§®‡§æ ‡§ï‡§æ‡§â‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ! üéØ`, threadID);
      }
      setTimeout(() => processDayPhase(api, threadID, gameID, botState), 20000);
    }
  }, 160000);
}

function processDayPhase(api, threadID, gameID, botState) {
  const game = botState.mafiaGames[gameID];
  if (!game || !game.active) return;
  let result = '‚òÄÔ∏è ‡§°‡•á ‡§´‡•á‡§ú ‡§ñ‡§§‡•ç‡§Æ‡•§ ';
  let eliminated = null;
  if (Object.keys(game.votes).length > 0) {
    const voteCounts = {};
    Object.values(game.votes).forEach(id => voteCounts[id] = (voteCounts[id] || 0) + 1);
    eliminated = Object.keys(voteCounts).reduce((a, b) => voteCounts[a] > voteCounts[b] ? a : b, null);
    if (eliminated) {
      game.alive.delete(eliminated);
      result += `@${game.players[eliminated].name} ‡§ï‡•ã ‡§µ‡•ã‡§ü ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ! ‡§µ‡•ã ${game.players[eliminated].role} ‡§•‡§æ‡•§`;
    }
  } else {
    result += '‡§ï‡•ã‡§à ‡§µ‡•ã‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü‡•§';
  }
  const mafiaCount = Array.from(game.alive).filter(id => game.players[id].role === 'Mafia').length;
  const villagerCount = game.alive.size - mafiaCount;
  if (mafiaCount === 0) {
    result += '\nüèÜ Villagers ‡§ú‡•Ä‡§§ ‡§ó‡§è! üéâ';
    delete botState.mafiaGames[gameID];
  } else if (mafiaCount >= villagerCount) {
    result += '\nüèÜ Mafia ‡§ú‡•Ä‡§§ ‡§ó‡§è! üòà';
    delete botState.mafiaGames[gameID];
  } else {
    result += '\nüåô ‡§®‡§Ø‡§æ ‡§®‡§æ‡§á‡§ü ‡§´‡•á‡§ú ‡§∂‡•Å‡§∞‡•Ç! ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ú‡§æ‡§ì ‡§î‡§∞ ‡§è‡§ï‡•ç‡§∂‡§® ‡§ö‡•Å‡§®‡•ã‡•§ üòé';
    game.phase = 'night';
    game.actions = { mafia: [], doctor: null, detective: null };
  }
  fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState, null, 2), 'utf8');
  api.sendMessage(result, threadID);
}
