const fs = require('fs');
const { LEARNED_RESPONSES_PATH } = require('../../config/constants');
const { MASTER_ID } = require('../../config/constants');

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

function getAlivePlayers(game) {
  return game.players.filter(p => p.alive);
}

function formatPlayerList(game) {
  let alive = getAlivePlayers(game);
  return alive.length > 0 ? alive.map((p, i) => `${i + 1}) ${p.name}`).join("\n") : "‡§ï‡•ã‡§à ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç‡•§";
}

function checkGameEnd(game) {
  let alive = getAlivePlayers(game);
  let mafiaCount = alive.filter(p => p.role === "Mafia" || p.role === "Werewolf").length;
  let villagerCount = alive.filter(p => p.role !== "Mafia" && p.role !== "Werewolf").length;
  if (mafiaCount === 0) return "‡§µ‡§ø‡§≤‡•á‡§ú‡§∞ ‡§ú‡•Ä‡§§‡•á! ‡§∏‡§æ‡§∞‡•á ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§Æ‡§∞ ‡§ó‡§è‡•§";
  if (mafiaCount >= villagerCount) return "‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ú‡•Ä‡§§‡§æ! ‡§â‡§®‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§≤‡•á‡§ú‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§π‡•à‡•§";
  return null;
}

module.exports = {
  name: 'mafia',
  description: "Mafia Game with Advanced Features",
  execute: async (api, threadID, args, event, botState, isMaster, botID, stopBot) => {
    const senderID = event.senderID;
    const command = args[0]?.toLowerCase();
    const isAdmin = Array.isArray(botState.adminList) && (botState.adminList.includes(senderID) || senderID === MASTER_ID);

    if (["begin", "next", "endvote", "stop", "reveal"].includes(command) && !isAdmin) {
      return api.sendMessage("üö´ ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§®‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à! üïâÔ∏è", threadID);
    }

    let game = botState.mafiaGames[threadID];
    if (!game) {
      if (["start", "join", "status"].includes(command)) {
        if (command !== "start") return api.sendMessage("‚ùå ‡§ï‡•ã‡§à ‡§ó‡•á‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ‡•§ #mafia start ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•ã‡•§", threadID);
      } else {
        return api.sendMessage("‚ùå ‡§ï‡•ã‡§à ‡§ó‡•á‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ‡•§", threadID);
      }
    }

    if (command === "start") {
      if (game && game.active) {
        return api.sendMessage("‚ùå ‡§ó‡•á‡§Æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à! #mafia stop ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§", threadID);
      }
      botState.mafiaGames[threadID] = {
        active: true,
        players: [],
        phase: "join",
        round: 0,
        mafiaKills: 0,
        mafiaTarget: null,
        doctorTarget: null,
        detectiveTarget: null,
        witchPoison: null,
        witchHeal: null,
        witchPoisonUsed: false,
        witchHealUsed: false,
        bodyguardTarget: null,
        mafiaChatID: null,
        votes: {},
        revealRoles: true,
        jokerFakeKill: null,
        jokerFakeKillUsed: false,
        log: [],
      };
      game = botState.mafiaGames[threadID];
      api.sendMessage("üé≠ ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç! #mafia join ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡•§ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 4 ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§", threadID);
      return;
    }

    if (command === "join" && game.phase === "join") {
      if (game.players.find(p => p.id === senderID)) {
        return api.sendMessage("‚ùå ‡§§‡•Å‡§Æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ó‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡•ã‡•§", threadID);
      }
      api.getUserInfo(senderID, (err, ret) => {
        if (err || !ret || !ret[senderID]) {
          return api.sendMessage("‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§", threadID);
        }
        const name = ret[senderID].name || "Unknown";
        game.players.push({ id: senderID, name, role: null, alive: true });
        api.sendMessage(`‚úÖ ${name} ‡§ó‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•Å‡§Ü!`, threadID);
      });
      return;
    }

    if (command === "begin" && game.phase === "join") {
      if (game.players.length < 4) {
        return api.sendMessage("‚ùå ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 4 ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§", threadID);
      }

      let playerCount = game.players.length;
      let mafiaCount = Math.floor(playerCount / 4);
      let doctorCount = Math.floor(playerCount / 5);
      let detectiveCount = playerCount >= 5 ? 1 : 0;
      let jokerCount = 1;
      let witchCount = playerCount > 10 ? 1 : 0;
      let bodyguardCount = playerCount > 15 ? 1 : 0;

      let shuffled = shuffle(game.players);
      let index = 0;
      // Assign Werewolf if possible
      for (let i = 0; i < mafiaCount; i++) {
        let role = (i === 0 && mafiaCount >= 2) ? "Werewolf" : "Mafia";
        shuffled[index++].role = role;
      }
      for (let i = 0; i < doctorCount; i++) shuffled[index++].role = "Doctor";
      if (detectiveCount) shuffled[index++].role = "Detective";
      if (witchCount) shuffled[index++].role = "Witch";
      if (bodyguardCount) shuffled[index++].role = "Bodyguard";
      if (jokerCount) shuffled[index++].role = "Joker";
      shuffled.slice(index).forEach(p => p.role = "Villager");

      // Store player game association
      game.players.forEach(p => {
        botState.playerGame[p.id] = threadID;
      });

      // Mafia/Werewolf chat
      if (mafiaCount > 1) {
        let mafiaIDs = game.players.filter(p => p.role === "Mafia" || p.role === "Werewolf").map(p => p.id);
        api.createChat(mafiaIDs, "Mafia Secret Chat", (err, chatThreadID) => {
          if (!err) {
            game.mafiaChatID = chatThreadID;
            api.sendMessage("‚ò†Ô∏è ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ, ‡§Ø‡§π‡§æ‡§Å ‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§¨‡§®‡§æ‡§ì ‡§î‡§∞ `/kill <‡§®‡§Ç‡§¨‡§∞>` ‡§∏‡•á ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ö‡•Å‡§®‡•ã‡•§", chatThreadID);
          }
        });
      }

      // Send roles via PM
      for (let p of game.players) {
        let msg = `üé≠ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ ‡§∞‡•ã‡§≤: ${p.role}\n\n`;
        if (p.role === "Mafia" || p.role === "Werewolf") msg += "‚ò†Ô∏è /kill <‡§®‡§Ç‡§¨‡§∞> ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§\n";
        if (p.role === "Doctor") msg += "üíâ /save <‡§®‡§Ç‡§¨‡§∞> ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§\n";
        if (p.role === "Detective") msg += "üîç /check <‡§®‡§Ç‡§¨‡§∞> ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§\n";
        if (p.role === "Witch") msg += "üßô‚Äç‚ôÄÔ∏è /poison <‡§®‡§Ç‡§¨‡§∞> (‡§è‡§ï ‡§¨‡§æ‡§∞) ‡§î‡§∞ /heal <‡§®‡§Ç‡§¨‡§∞> (‡§è‡§ï ‡§¨‡§æ‡§∞) ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§\n";
        if (p.role === "Bodyguard") msg += "üõ°Ô∏è /protect <‡§®‡§Ç‡§¨‡§∞> ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§\n";
        if (p.role === "Joker") msg += "ü§° ‡§§‡•Å‡§Æ ‡§ú‡•ã‡§ï‡§∞ ‡§π‡•ã! ‡§µ‡•ã‡§ü ‡§∏‡•á ‡§®‡§ø‡§ï‡§≤‡§µ‡§æ‡§ì ‡§î‡§∞ ‡§ú‡•Ä‡§§‡•ã‡•§ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®, ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§Æ‡§æ‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à! /fakekill <‡§®‡§Ç‡§¨‡§∞> (‡§è‡§ï ‡§¨‡§æ‡§∞) ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§\n";
        msg += "\n‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä:\n" + formatPlayerList(game);
        api.sendMessage(msg, p.id);
        if (p.role === "Joker") {
          let randomJokerMsg = ["‡§ú‡•ã‡§ï‡§∞, ‡§Ü‡§ú ‡§ï‡§ø‡§∏‡•á ‡§¨‡•á‡§µ‡§ï‡•Ç‡§´ ‡§¨‡§®‡§æ‡§è‡§ó‡§æ? ü§°", "‡§ú‡•ã‡§ï‡§∞, ‡§µ‡•ã‡§ü‡•ç‡§∏ ‡§á‡§ï‡§ü‡•ç‡§†‡§æ ‡§ï‡§∞‡•ã, ‡§ú‡•Ä‡§§ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•Ä ‡§π‡•à! üòé"];
          api.sendMessage(randomJokerMsg[Math.floor(Math.random() * randomJokerMsg.length)], p.id);
        }
      }

      game.phase = "night";
      game.round = 1;
      api.sendMessage("üåô ‡§®‡§æ‡§á‡§ü 1 ‡§∂‡•Å‡§∞‡•Ç! ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ, ‡§°‡•â‡§ï‡•ç‡§ü‡§∞, ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§ü‡§ø‡§µ, ‡§ú‡§æ‡§¶‡•Ç‡§ó‡§∞‡§®‡•Ä, ‡§¨‡•â‡§°‡•Ä‡§ó‡§æ‡§∞‡•ç‡§°, ‡§ú‡•ã‡§ï‡§∞ ‡§Ö‡§™‡§®‡•á ‡§á‡§®‡§¨‡•â‡§ï‡•ç‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§", threadID);
      setTimeout(() => {
        if (game.phase === "night") {
          api.sendMessage("‚è∞ ‡§®‡§æ‡§á‡§ü ‡§ü‡§æ‡§á‡§Æ ‡§ñ‡§§‡•ç‡§Æ! ‡§ë‡§ü‡•ã ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§", threadID);
          module.exports.execute(api, threadID, ["next"], event, botState, isMaster, botID, stopBot);
        }
      }, 60000); // 60 seconds
      return;
    }

    if (command === "next" && game.phase === "night") {
      let killedPlayers = Array.isArray(game.mafiaTarget) ? game.mafiaTarget : [game.mafiaTarget];
      if (game.witchPoison) killedPlayers.push(game.witchPoison);
      let saved = game.doctorTarget || game.witchHeal;
      let msg = `üåô ‡§®‡§æ‡§á‡§ü ${game.round} ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü:\n`;

      // Bodyguard check
      if (game.bodyguardTarget && killedPlayers.includes(game.bodyguardTarget)) {
        let bodyguard = game.players.find(p => p.role === "Bodyguard");
        bodyguard.alive = false;
        killedPlayers = killedPlayers.filter(id => id !== game.bodyguardTarget);
        msg += `üõ°Ô∏è ‡§¨‡•â‡§°‡•Ä‡§ó‡§æ‡§∞‡•ç‡§° ‡§®‡•á ${game.players.find(p => p.id === game.bodyguardTarget).name} ‡§ï‡•ã ‡§¨‡§ö‡§æ ‡§≤‡§ø‡§Ø‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ñ‡•Å‡§¶ ‡§Æ‡§∞ ‡§ó‡§Ø‡§æ!\n`;
      }

      // Joker fakekill check
      if (game.jokerFakeKill && killedPlayers.includes(game.jokerFakeKill)) {
        killedPlayers = killedPlayers.filter(id => id !== game.jokerFakeKill);
        msg += `ü§° ‡§ú‡•ã‡§ï‡§∞ ‡§®‡•á ‡§ï‡§ø‡§≤ ‡§´‡•á‡§≤ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ! (‡§´‡•á‡§ï ‡§ï‡§ø‡§≤ ‡§∏‡§´‡§≤)\n`;
      }

      let killed = killedPlayers.filter(id => id && id !== saved);
      killed.forEach(id => {
        let killedPlayer = game.players.find(p => p.id === id);
        if (killedPlayer) {
          killedPlayer.alive = false;
          game.log.push(`‚ò†Ô∏è ‡§∞‡§æ‡§â‡§Ç‡§° ${game.round}: ${killedPlayer.name} ‡§Æ‡§æ‡§∞‡§æ ‡§ó‡§Ø‡§æ`);
          game.mafiaKills++;
          msg += `üíÄ ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§®‡•á ${killedPlayer.name} ‡§ï‡•ã ‡§Æ‡§æ‡§∞ ‡§¶‡§ø‡§Ø‡§æ!${game.revealRoles ? ` (${killedPlayer.role} ‡§•‡§æ)` : ""}\n`;
        }
      });
      if (killedPlayers.length > 0 && killed.length === 0) {
        msg += `üíâ ${game.players.find(p => p.id === saved).name} ‡§ï‡•ã ‡§¨‡§ö‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ!\n`;
      }
      if (!killedPlayers.length) {
        msg += "‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§∞‡§æ‡•§\n";
      }

      // Reset night targets
      game.mafiaTarget = null;
      game.doctorTarget = null;
      game.detectiveTarget = null;
      game.witchPoison = null;
      game.witchHeal = null;
      game.bodyguardTarget = null;
      game.jokerFakeKill = null;
      game.jokerFakeKillUsed = true; // Mark as used if applied

      let gameEnd = checkGameEnd(game);
      if (gameEnd) {
        msg += `\nüéÆ ‡§ó‡•á‡§Æ ‡§ì‡§µ‡§∞: ${gameEnd}\n`;
        msg += `üìú ‡§ó‡•á‡§Æ ‡§≤‡•â‡§ó:\n${game.log.join("\n")}\n`;
        msg += `üèÜ ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ï‡§ø‡§≤‡•ç‡§∏: ${game.mafiaKills}`;
        let winners;
        if (gameEnd.includes("‡§µ‡§ø‡§≤‡•á‡§ú‡§∞")) {
          winners = getAlivePlayers(game).filter(p => p.role !== "Mafia" && p.role !== "Werewolf");
        } else {
          winners = getAlivePlayers(game).filter(p => p.role === "Mafia" || p.role === "Werewolf");
        }
        winners.forEach(p => {
          botState.leaderboard[p.id] = (botState.leaderboard[p.id] || 0) + 5;
        });
        game.players.filter(p => p.role === "Mafia" || p.role === "Werewolf").forEach(p => {
          botState.leaderboard[p.id] = (botState.leaderboard[p.id] || 0) + game.mafiaKills * 10;
        });
        // Save leaderboard and jokerWins
        botState.learnedResponses.leaderboard = botState.leaderboard;
        botState.learnedResponses.jokerWins = botState.jokerWins;
        fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState.learnedResponses, null, 2), 'utf8');
        let leaderboardMsg = `\nüèÜ ‡§≤‡•Ä‡§°‡§∞‡§¨‡•ã‡§∞‡•ç‡§°:\n${Object.entries(botState.leaderboard).slice(0, 10).map(([id, points]) => {
          let name = game.players.find(p => p.id === id)?.name || id;
          return `${name}: ${points} ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏`;
        }).join("\n")}`;
        msg += leaderboardMsg;
        // Stop game
        game.players.forEach(p => delete botState.playerGame[p.id]);
        delete botState.mafiaGames[threadID];
        api.sendMessage(msg, threadID);
        return;
      }

      game.phase = "day";
      msg += `\n‚òÄÔ∏è ‡§°‡•á ${game.round} ‡§∂‡•Å‡§∞‡•Ç!\n‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä:\n${formatPlayerList(game)}\n‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ #mafia vote <‡§®‡§Ç‡§¨‡§∞> ‡§∏‡•á ‡§µ‡•ã‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§`;
      api.sendMessage(msg, threadID);
      setTimeout(() => {
        if (game.phase === "day") {
          api.sendMessage("‚è∞ ‡§°‡•á ‡§ü‡§æ‡§á‡§Æ ‡§ñ‡§§‡•ç‡§Æ! ‡§ë‡§ü‡•ã ‡§µ‡•ã‡§ü ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§", threadID);
          module.exports.execute(api, threadID, ["endvote"], event, botState, isMaster, botID, stopBot);
        }
      }, 60000);
      return;
    }

    if ((command === "vote" || command === "doublevote") && game.phase === "day") {
      let choice = args[1];
      let target = null;
      let alive = getAlivePlayers(game);
      if (choice) {
        if (!isNaN(choice)) {
          target = alive[parseInt(choice) - 1];
        } else {
          target = alive.find(p => p.name.toLowerCase() === choice.toLowerCase() || p.id === choice);
        }
      }
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§ ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¶‡•á‡§ñ‡•ã‡•§", threadID);

      let voteCount = 1;
      let isDouble = command === "doublevote";
      if (isDouble && game.players.find(p => p.id === senderID).role !== "Joker") {
        return api.sendMessage("üö´ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§ú‡•ã‡§ï‡§∞ doublevote ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à! #mafia vote <‡§®‡§Ç‡§¨‡§∞> ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§", threadID);
      }
      if (isDouble) voteCount = 2;

      api.getUserInfo(senderID, (err, ret) => {
        if (err || !ret || !ret[senderID]) {
          return api.sendMessage("‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§", threadID);
        }
        const voterName = ret[senderID].name || "Unknown";
        game.votes[target.id] = (game.votes[target.id] || 0) + voteCount;
        let voteType = isDouble ? "‡§°‡§¨‡§≤ ‡§µ‡•ã‡§ü" : "‡§µ‡•ã‡§ü";
        api.sendMessage(`${voteType} ‡§¶‡§ø‡§Ø‡§æ ${voterName} ‡§®‡•á ${target.name} ‡§ï‡•ã! ‡§ï‡•Å‡§≤ ‡§µ‡•ã‡§ü‡•ç‡§∏: ${game.votes[target.id]}`, threadID);
      });
      return;
    }

    if (command === "endvote" && game.phase === "day") {
      let maxVotes = 0;
      let eliminated = null;
      for (let id in game.votes) {
        if (game.votes[id] > maxVotes) {
          maxVotes = game.votes[id];
          eliminated = game.players.find(p => p.id === id);
        }
      }
      let aliveCount = getAlivePlayers(game).length;
      let msg = `‚òÄÔ∏è ‡§°‡•á ${game.round} ‡§µ‡•ã‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü:\n`;
      if (eliminated && maxVotes > aliveCount / 2) {
        eliminated.alive = false;
        game.log.push(`üó≥Ô∏è ‡§∞‡§æ‡§â‡§Ç‡§° ${game.round}: ${eliminated.name} ‡§µ‡•ã‡§ü ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ`);
        msg += `üíÄ ‡§µ‡•ã‡§ü ‡§∏‡•á ${eliminated.name} ‡§ï‡•ã ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ!${game.revealRoles ? ` (${eliminated.role} ‡§•‡§æ)` : ""}\n`;
        if (eliminated.role === "Joker") {
          msg += `ü§° ‡§π‡§æ ‡§π‡§æ! ${eliminated.name} ‡§ú‡•ã‡§ï‡§∞ ‡§•‡§æ ‡§î‡§∞ ‡§â‡§∏‡§®‡•á ‡§∏‡§¨‡§ï‡•ã ‡§¨‡•á‡§µ‡§ï‡•Ç‡§´ ‡§¨‡§®‡§æ‡§Ø‡§æ! ‡§ú‡•ã‡§ï‡§∞ ‡§ú‡•Ä‡§§ ‡§ó‡§Ø‡§æ, ‡§ó‡•á‡§Æ ‡§ì‡§µ‡§∞!\n`;
          msg += `üìú ‡§ó‡•á‡§Æ ‡§≤‡•â‡§ó:\n${game.log.join("\n")}\n`;
          msg += `üèÜ ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ï‡§ø‡§≤‡•ç‡§∏: ${game.mafiaKills}`;
          botState.leaderboard[eliminated.id] = (botState.leaderboard[eliminated.id] || 0) + 20;
          botState.jokerWins[eliminated.id] = (botState.jokerWins[eliminated.id] || 0) + 1;
          if (botState.jokerWins[eliminated.id] === 3) {
            msg += `\nüëë ${eliminated.name} ‡§ú‡•ã‡§ï‡§∞ ‡§ï‡§ø‡§Ç‡§ó ‡§¨‡§® ‡§ó‡§Ø‡§æ! ü§°`;
          }
          // Save
          botState.learnedResponses.leaderboard = botState.leaderboard;
          botState.learnedResponses.jokerWins = botState.jokerWins;
          fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState.learnedResponses, null, 2), 'utf8');
          let leaderboardMsg = `\nüèÜ ‡§≤‡•Ä‡§°‡§∞‡§¨‡•ã‡§∞‡•ç‡§°:\n${Object.entries(botState.leaderboard).slice(0, 10).map(([id, points]) => {
            let name = game.players.find(p => p.id === id)?.name || id;
            return `${name}: ${points} ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏`;
          }).join("\n")}`;
          msg += leaderboardMsg;
          // Stop game
          game.players.forEach(p => delete botState.playerGame[p.id]);
          delete botState.mafiaGames[threadID];
          api.sendMessage(msg, threadID);
          return;
        }
      } else {
        msg += `üõ°Ô∏è ‡§ï‡•ã‡§à ‡§¨‡§π‡•Å‡§Æ‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ, ‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç ‡§®‡§ø‡§ï‡§≤‡§æ‡•§\n`;
      }

      let gameEnd = checkGameEnd(game);
      if (gameEnd) {
        msg += `\nüéÆ ‡§ó‡•á‡§Æ ‡§ì‡§µ‡§∞: ${gameEnd}\n`;
        msg += `üìú ‡§ó‡•á‡§Æ ‡§≤‡•â‡§ó:\n${game.log.join("\n")}\n`;
        msg += `üèÜ ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ï‡§ø‡§≤‡•ç‡§∏: ${game.mafiaKills}`;
        let winners;
        if (gameEnd.includes("‡§µ‡§ø‡§≤‡•á‡§ú‡§∞")) {
          winners = getAlivePlayers(game).filter(p => p.role !== "Mafia" && p.role !== "Werewolf");
        } else {
          winners = getAlivePlayers(game).filter(p => p.role === "Mafia" || p.role === "Werewolf");
        }
        winners.forEach(p => {
          botState.leaderboard[p.id] = (botState.leaderboard[p.id] || 0) + 5;
        });
        game.players.filter(p => p.role === "Mafia" || p.role === "Werewolf").forEach(p => {
          botState.leaderboard[p.id] = (botState.leaderboard[p.id] || 0) + game.mafiaKills * 10;
        });
        // Save
        botState.learnedResponses.leaderboard = botState.leaderboard;
        botState.learnedResponses.jokerWins = botState.jokerWins;
        fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState.learnedResponses, null, 2), 'utf8');
        let leaderboardMsg = `\nüèÜ ‡§≤‡•Ä‡§°‡§∞‡§¨‡•ã‡§∞‡•ç‡§°:\n${Object.entries(botState.leaderboard).slice(0, 10).map(([id, points]) => {
          let name = game.players.find(p => p.id === id)?.name || id;
          return `${name}: ${points} ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏`;
        }).join("\n")}`;
        msg += leaderboardMsg;
        // Stop game
        game.players.forEach(p => delete botState.playerGame[p.id]);
        delete botState.mafiaGames[threadID];
        api.sendMessage(msg, threadID);
        return;
      }

      game.votes = {};
      game.round++;
      game.phase = "night";
      api.sendMessage(`üåô ‡§®‡§æ‡§á‡§ü ${game.round} ‡§∂‡•Å‡§∞‡•Ç!\n‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä:\n${formatPlayerList(game)}`, threadID);
      setTimeout(() => {
        if (game.phase === "night") {
          api.sendMessage("‚è∞ ‡§®‡§æ‡§á‡§ü ‡§ü‡§æ‡§á‡§Æ ‡§ñ‡§§‡•ç‡§Æ! ‡§ë‡§ü‡•ã ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§", threadID);
          module.exports.execute(api, threadID, ["next"], event, botState, isMaster, botID, stopBot);
        }
      }, 60000);
      return;
    }

    if (command === "reveal" && isAdmin) {
      game.revealRoles = args[1]?.toLowerCase() === "on";
      api.sendMessage(`üïµÔ∏è‚Äç‚ôÇÔ∏è ‡§∞‡•ã‡§≤ ‡§∞‡§ø‡§µ‡•Ä‡§≤ ${game.revealRoles ? "‡§ö‡§æ‡§≤‡•Ç" : "‡§¨‡§Ç‡§¶"} ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§`, threadID);
      return;
    }

    if (command === "stop") {
      if (!game.active) {
        return api.sendMessage("‚ùå ‡§ï‡•ã‡§à ‡§ó‡•á‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ‡•§", threadID);
      }
      game.players.forEach(p => delete botState.playerGame[p.id]);
      delete botState.mafiaGames[threadID];
      api.sendMessage("üõë ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§¨‡§Ç‡§¶‡•§", threadID);
      return;
    }

    if (command === "status") {
      if (!game.active) {
        return api.sendMessage("‚ùå ‡§ï‡•ã‡§à ‡§ó‡•á‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ‡•§", threadID);
      }
      let msg = `üé≠ ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏:\n‡§´‡•á‡§ú: ${game.phase}\n‡§∞‡§æ‡§â‡§Ç‡§°: ${game.round}\n‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä:\n${formatPlayerList(game)}\n‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§ï‡§ø‡§≤‡•ç‡§∏: ${game.mafiaKills}`;
      api.sendMessage(msg, threadID);
      return;
    }

    api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•§ ‡§Ø‡•Ç‡§ú: #mafia [start|join|begin|next|vote <‡§®‡§Ç‡§¨‡§∞>|doublevote <‡§®‡§Ç‡§¨‡§∞>|endvote|stop|status|reveal on/off]", threadID);
  },
  handleEvent: async ({ api, event, botState }) => {
    const senderID = event.senderID;
    const body = event.body?.trim();
    if (!body || event.threadID === senderID) return; // Only PM (!isGroup)

    const gameThread = botState.playerGame[senderID];
    if (!gameThread) return;

    const game = botState.mafiaGames[gameThread];
    if (!game || !game.active || game.phase !== "night") return;

    let player = game.players.find(p => p.id === senderID && p.alive);
    if (!player) return;

    let args = body.split(" ");
    let cmd = args[0].toLowerCase();
    let choice = args[1];

    let target = null;
    if (choice) {
      let alive = getAlivePlayers(game);
      if (!isNaN(choice)) {
        target = alive[parseInt(choice) - 1];
      } else {
        target = alive.find(p => p.name.toLowerCase() === choice.toLowerCase() || p.id === choice);
      }
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§ ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•ã‡•§", senderID);
    }

    if ((player.role === "Mafia" || player.role === "Werewolf") && cmd === "/kill") {
      if (player.role === "Werewolf" && game.round % 3 === 0 && args[2]) {
        let target2Id = args[2];
        let target2 = getAlivePlayers(game).find(p => p.id === target2Id || p.name.toLowerCase() === target2Id.toLowerCase());
        if (target && target2 && target.id !== target2.id) {
          game.mafiaTarget = [target.id, target2.id];
          api.sendMessage(`üê∫ ‡§µ‡•á‡§Ø‡§∞‡§µ‡•Å‡§≤‡•ç‡§´ ‡§®‡•á ${target.name} ‡§î‡§∞ ${target2.name} ‡§ï‡•ã ‡§ö‡•Å‡§®‡§æ‡•§`, senderID);
          return;
        } else {
          return api.sendMessage("‚ùå ‡§¶‡•ã ‡§Ö‡§≤‡§ó ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ö‡•Å‡§®‡•ã‡•§", senderID);
        }
      } else if (target) {
        game.mafiaTarget = target.id;
        api.sendMessage(`‚ò†Ô∏è ${player.role} ‡§®‡•á ${target.name} ‡§ï‡•ã ‡§ö‡•Å‡§®‡§æ‡•§`, senderID);
      } else {
        return api.sendMessage("‚ùå ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ö‡•Å‡§®‡•ã: /kill <‡§®‡§Ç‡§¨‡§∞ ‡§Ø‡§æ ‡§®‡§æ‡§Æ>", senderID);
      }
    } else if (player.role === "Doctor" && cmd === "/save") {
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§", senderID);
      game.doctorTarget = target.id;
      api.sendMessage(`üíâ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§®‡•á ${target.name} ‡§ï‡•ã ‡§¨‡§ö‡§æ‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡•Ä‡•§`, senderID);
    } else if (player.role === "Detective" && cmd === "/check") {
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§", senderID);
      game.detectiveTarget = target.id;
      let targetPlayer = game.players.find(p => p.id === target.id);
      let result = (targetPlayer.role === "Mafia" || targetPlayer.role === "Werewolf")
        ? `‚ùå ${target.name} ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§π‡•à!`
        : `‚úÖ ${target.name} ‡§Æ‡§æ‡§´‡§ø‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§`;
      api.sendMessage(`üîç ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§ü‡§ø‡§µ ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü: ${result}`, senderID);
    } else if (player.role === "Witch" && cmd === "/poison" && !game.witchPoisonUsed) {
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§", senderID);
      game.witchPoison = target.id;
      game.witchPoisonUsed = true;
      api.sendMessage(`üßô‚Äç‚ôÄÔ∏è ‡§ú‡§æ‡§¶‡•Ç‡§ó‡§∞‡§®‡•Ä ‡§®‡•á ${target.name} ‡§ï‡•ã ‡§ú‡§º‡§π‡§∞ ‡§¶‡§ø‡§Ø‡§æ‡•§`, senderID);
    } else if (player.role === "Witch" && cmd === "/heal" && !game.witchHealUsed) {
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§", senderID);
      game.witchHeal = target.id;
      game.witchHealUsed = true;
      api.sendMessage(`üßô‚Äç‚ôÄÔ∏è ‡§ú‡§æ‡§¶‡•Ç‡§ó‡§∞‡§®‡•Ä ‡§®‡•á ${target.name} ‡§ï‡•ã ‡§¨‡§ö‡§æ‡§Ø‡§æ‡•§`, senderID);
    } else if (player.role === "Bodyguard" && cmd === "/protect") {
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§", senderID);
      game.bodyguardTarget = target.id;
      api.sendMessage(`üõ°Ô∏è ‡§¨‡•â‡§°‡•Ä‡§ó‡§æ‡§∞‡•ç‡§° ‡§®‡•á ${target.name} ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§ü‡•á‡§ï‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ‡•§`, senderID);
    } else if (player.role === "Joker" && cmd === "/fakekill" && !game.jokerFakeKillUsed) {
      if (!target) return api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•§", senderID);
      game.jokerFakeKill = target.id;
      api.sendMessage(`ü§° ‡§ú‡•ã‡§ï‡§∞ ‡§®‡•á ${target.name} ‡§ï‡•ã ‡§´‡•á‡§ï ‡§ï‡§ø‡§≤ ‡§ö‡•Å‡§®‡§æ‡•§`, senderID);
    } else {
      api.sendMessage("‚ùå ‡§ó‡§≤‡§§ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Ø‡§æ ‡§∞‡•ã‡§≤ ‡§Æ‡•à‡§ö ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§Ö‡§™‡§®‡•á ‡§∞‡•ã‡§≤ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§", senderID);
    }
  }
};
