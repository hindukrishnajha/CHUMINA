const { ensureThreadHasMessage, retryNicknameChange, sendMessageWithCooldown } = require('../../utils/nicknameUtils');

module.exports = {
  name: 'removenick',
  aliases: ['removenickname'],
  description: '‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§Æ‡•ã‡§° ‡§ï‡•ã ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§',
  execute(api, threadID, args, event, botState = {}, isMaster = false) {
    console.log(`[DEBUG] removenick command: args=${args.join(' ')}, threadID=${threadID}, senderID=${event.senderID}`);
    
    botState.adminList = botState.adminList || [];
    const isAdmin = botState.adminList.includes(event.senderID) || isMaster;
    if (!isAdmin) {
      sendMessageWithCooldown(api, threadID, 'üö´ ‡§Ø‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§®‡•ç‡§∏ ‡§Ø‡§æ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à!');
      return;
    }

    if (args.length < 1) {
      sendMessageWithCooldown(api, threadID, '‡§â‡§™‡§Ø‡•ã‡§ó: #removenick on @everyone ‡§Ø‡§æ #removenick on @user ‡§Ø‡§æ #removenick off ‡§Ø‡§æ #removenick off @user');
      return;
    }

    const command = args[0].toLowerCase(); // Fix: args[0] is 'on' or 'off'
    let targetID = Object.keys(event.mentions)[0] || null;

    try {
      botState.removeNicknameActive = botState.removeNicknameActive || {};
      botState.removeNicknameTargets = botState.removeNicknameTargets || {};
      botState.lastNicknameChange = botState.lastNicknameChange || {};

      // Early admin permission check
      api.getThreadInfo(threadID, (err, info) => {
        if (err || !info) {
          sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
          return;
        }
        if (!info.adminIDs.some(admin => admin.id === api.getCurrentUserID())) {
          sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§∞‡§Æ‡§ø‡§∂‡§® ‡§ö‡§æ‡§π‡§ø‡§è‡•§');
          console.log('[DEBUG] Bot lacks admin permissions');
          return;
        }

        if (command === 'on' && args[1] === '@everyone') {
          // Remove nicknames for all with 20s delay per change and one message
          botState.removeNicknameActive[threadID] = true;
          botState.removeNicknameTargets[threadID] = null;

          ensureThreadHasMessage(api, threadID, () => {
            api.getThreadInfo(threadID, (err, info) => {
              if (err || !info || !info.participantIDs) {
                sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
                return;
              }

              const botID = api.getCurrentUserID();
              const members = info.participantIDs.filter(id => id !== botID);
              console.log(`[DEBUG] Processing ${members.length} members for remove nickname`);

              let i = 0;
              const removeNext = () => {
                if (i >= members.length || !botState.removeNicknameActive[threadID]) return;

                const memberID = members[i];
                const lastChange = botState.lastNicknameChange[`${threadID}:${memberID}`] || 0;
                if (Date.now() - lastChange < 20000) {
                  console.log(`[DEBUG] Skipped nickname removal for ${memberID} due to cooldown`);
                  i++;
                  setTimeout(removeNext, 20000);
                  return;
                }

                retryNicknameChange(api, threadID, memberID, '', 3, (success) => { // Increased retry to 3
                  if (success) {
                    botState.lastNicknameChange[`${threadID}:${memberID}`] = Date.now();
                    console.log(`[DEBUG] Removed nickname for memberID=${memberID}`);
                  } else {
                    console.log(`[DEBUG] Failed to remove nickname for ${memberID} after retries`);
                  }
                  i++;
                  setTimeout(removeNext, 20000); // 20s delay
                });
              };
              removeNext();
              sendMessageWithCooldown(api, threadID, '‚úÖ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ‡§®‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§è! (#removenick off ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§ó‡§æ).'); // Only one message
            });
          });
        } else if (command === 'on' && targetID) {
          // Specific user remove
          if (!targetID) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§≤‡§ø‡§° ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§Æ‡•á‡§Ç‡§∂‡§® ‡§ï‡§∞‡•á‡§Ç‡•§');
            return;
          }

          api.getUserInfo([targetID], (err, ret) => {
            if (err || !ret || !ret[targetID]) {
              sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
              return;
            }

            const name = ret[targetID].name || 'User';
            if (!botState.removeNicknameActive[threadID]) {
              botState.removeNicknameActive[threadID] = true;
              botState.removeNicknameTargets[threadID] = new Set();
            }
            botState.removeNicknameTargets[threadID].add(targetID);

            const lastChange = botState.lastNicknameChange[`${threadID}:${targetID}`] || 0;
            if (Date.now() - lastChange < 20000) {
              sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•Ç‡§≤‡§°‡§æ‡§â‡§®: 20 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
              return;
            }

            retryNicknameChange(api, threadID, targetID, '', 3, (success) => { // Increased retry
              if (success) {
                sendMessageWithCooldown(api, threadID, `‚úÖ ${name} ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! (#removenick off @user ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§ó‡§æ).`);
                botState.lastNicknameChange[`${threadID}:${targetID}`] = Date.now();
              } else {
                sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤ (API ‡§á‡§∂‡•ç‡§Ø‡•Ç)‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
              }
            });
          });
        } else if (command === 'off' && !targetID) {
          // Stop for group
          if (!botState.removeNicknameActive?.[threadID]) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§Æ‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•à‡•§');
            return;
          }

          botState.removeNicknameActive[threadID] = false;
          delete botState.removeNicknameTargets[threadID];
          sendMessageWithCooldown(api, threadID, '‚úÖ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!');
        } else if (command === 'off' && targetID) {
          // Stop for specific user
          if (!botState.removeNicknameTargets?.[threadID]?.has(targetID)) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§Æ‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•à‡•§');
            return;
          }

          api.getUserInfo([targetID], (err, ret) => {
            if (err || !ret || !ret[targetID]) {
              sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
              return;
            }
            const name = ret[targetID].name || 'User';
            botState.removeNicknameTargets[threadID].delete(targetID);
            if (botState.removeNicknameTargets[threadID].size === 0) {
              botState.removeNicknameActive[threadID] = false;
              delete botState.removeNicknameTargets[threadID];
            }
            sendMessageWithCooldown(api, threadID, `‚úÖ ${name} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!`);
          });
        } else {
          sendMessageWithCooldown(api, threadID, '‡§â‡§™‡§Ø‡•ã‡§ó: #removenick on @everyone ‡§Ø‡§æ #removenick on @user ‡§Ø‡§æ #removenick off ‡§Ø‡§æ #removenick off @user');
        }
      });
    } catch (e) {
      console.error(`[ERROR] removenick error: ${e?.message || 'Unknown error'}`);
      sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•Å‡§à, ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
    }
  }
};
