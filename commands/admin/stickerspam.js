// stickerspam.js - Fixed version for user-defined intervals and better error handling
const favoriteStickers = require('../../responses/favoriteStickers');

module.exports = {
  name: "stickerspam",
  aliases: ["send"],
  async execute(api, threadID, args, event, botState, isMaster) {
    console.log(`[DEBUG] stickerspam called: threadID=${threadID}, args=${JSON.stringify(args)}`);
    try {
      // Check if user is authorized
      if (!isMaster && !botState.adminList.includes(event.senderID)) {
        api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
        return;
      }

      // Initialize stickerSpam state
      if (!botState.stickerSpam) {
        botState.stickerSpam = {};
      }

      // Handle #send sticker <time> or #stickerspam sticker start <time>
      if ((args[0]?.toLowerCase() === 'sticker' && args[1]?.toLowerCase() === 'start') || 
          (args[0]?.toLowerCase() === 'sticker' && !isNaN(args[1]))) {
        let timeSeconds;

        // Check if command is #send sticker <time> or #stickerspam sticker start <time>
        if (args[0].toLowerCase() === 'sticker' && !isNaN(args[1])) {
          timeSeconds = parseInt(args[1]); // For #send sticker <time>
        } else {
          timeSeconds = parseInt(args[2]); // For #stickerspam sticker start <time>
        }

        // Validate time input
        if (isNaN(timeSeconds) || timeSeconds < 1 || timeSeconds > 3600) {
          console.log(`[DEBUG] Invalid time parameter: ${timeSeconds}`);
          api.sendMessage('‡§â‡§™‡§Ø‡•ã‡§ó: #send sticker <time_in_seconds> (1-3600) ‡§Ø‡§æ #stickerspam sticker stop', threadID);
          return;
        }

        const timeMs = timeSeconds * 1000; // Convert user input to milliseconds for interval
        console.log(`[DEBUG] Starting sticker spam with interval: ${timeMs}ms`);

        // Check if spam is already active
        if (!botState.stickerSpam[threadID]) {
          const stickers = favoriteStickers.favoriteStickers;

          // Validate stickers
          if (!stickers || stickers.length === 0) {
            console.error('[ERROR] No stickers found in favoriteStickers');
            api.sendMessage('‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞‡•ç‡§∏ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ favoriteStickers.js ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§', threadID);
            return;
          }

          const validStickers = stickers.filter(id => typeof id === 'number' && id > 0);
          if (validStickers.length === 0) {
            console.error('[ERROR] No valid sticker IDs found');
            api.sendMessage('‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§µ‡•à‡§≤‡§ø‡§° ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ID ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ favoriteStickers.js ‡§Æ‡•á‡§Ç ‡§∏‡§π‡•Ä IDs ‡§°‡§æ‡§≤‡•á‡§Ç‡•§', threadID);
            return;
          }
          console.log('[DEBUG] Valid stickers:', validStickers);

          // Retry logic for sending stickers
          const sendStickerWithRetry = async (stickerId, threadID, retries = 3) => {
            for (let i = 0; i < retries; i++) {
              try {
                console.log(`[DEBUG] Attempt ${i + 1} to send sticker ${stickerId} to thread ${threadID}`);
                await new Promise((resolve, reject) => {
                  api.sendMessage({ sticker: stickerId }, threadID, (err) => {
                    if (err) return reject(err);
                    resolve();
                  });
                });
                console.log(`[DEBUG] Sticker ${stickerId} sent to thread ${threadID}`);
                return true;
              } catch (error) {
                console.error(`[ERROR] Sticker send failed on attempt ${i + 1}:`, error.message);
                if (i === retries - 1) return false;
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retry
              }
            }
            return false;
          };

          // Start sticker spam
          const intervalId = setInterval(async () => {
            const randomSticker = validStickers[Math.floor(Math.random() * validStickers.length)];
            const success = await sendStickerWithRetry(randomSticker, threadID);
            if (!success) {
              console.error(`[ERROR] Failed to send sticker ${randomSticker} after retries`);
              api.sendMessage(`‚ö†Ô∏è ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ${randomSticker} ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ favoriteStickers.js ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§`, threadID);
              clearInterval(intervalId);
              delete botState.stickerSpam[threadID];
            }
          }, timeMs);

          botState.stickerSpam[threadID] = {
            interval: intervalId,
            time: timeMs
          };

          api.sendMessage(`‚úÖ Thanks Master! ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§∂‡•Å‡§∞‡•Ç! ‡§π‡§∞ ${timeSeconds} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ Stop ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è #stickerspam sticker stop`, threadID);

          // Auto-stop after 1 hour to prevent infinite loops
          setTimeout(() => {
            if (botState.stickerSpam[threadID]) {
              clearInterval(botState.stickerSpam[threadID].interval);
              delete botState.stickerSpam[threadID];
              api.sendMessage('‚è∞ ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§∏‡•ç‡§™‡•à‡§Æ 1 ‡§ò‡§Ç‡§ü‡•á ‡§¨‡§æ‡§¶ ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§', threadID);
            }
          }, 3600 * 1000); // 1 hour max duration

        } else {
          console.log(`[DEBUG] Sticker spam already active for thread ${threadID}`);
          api.sendMessage(`‚ö†Ô∏è ‡§á‡§∏ ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à (‡§π‡§∞ ${botState.stickerSpam[threadID].time / 1000}s)‡•§ ‡§™‡§π‡§≤‡•á #stickerspam sticker stop ‡§ï‡§∞‡•ã‡•§`, threadID);
        }
      } else if (args[0]?.toLowerCase() === 'sticker' && args[1]?.toLowerCase() === 'stop') {
        // Stop sticker spam
        if (botState.stickerSpam[threadID]) {
          clearInterval(botState.stickerSpam[threadID].interval);
          delete botState.stickerSpam[threadID];
          console.log(`[DEBUG] Sticker spam stopped for thread ${threadID}`);
          api.sendMessage('‚úÖ ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§', threadID);
        } else {
          console.log(`[DEBUG] No active sticker spam for thread ${threadID}`);
          api.sendMessage('‚ö†Ô∏è ‡§á‡§∏ ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§ö‡§æ‡§≤‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§', threadID);
        }
      } else {
        console.log(`[DEBUG] Invalid sticker spam command: ${args.join(' ')}`);
        api.sendMessage('‡§â‡§™‡§Ø‡•ã‡§ó: #send sticker <time_in_seconds> (1-3600) ‡§Ø‡§æ #stickerspam sticker stop', threadID);
      }
    } catch (e) {
      console.error(`[ERROR] stickerspam error for thread ${threadID}:`, e.message);
      api.sendMessage(`‚ö†Ô∏è ‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä: ${e.message}`, threadID);
    }
  }
};
