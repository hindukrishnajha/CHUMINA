const { ensureThreadHasMessage, retryNicknameChange, sendMessageWithCooldown } = require('../../utils/nicknameUtils');

module.exports = {
  name: 'nicklock',
  aliases: ['nicknamelock'],
  description: '‡§≤‡•â‡§ï ‡§Ø‡§æ ‡§Ö‡§®‡§≤‡•â‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§ï‡•ã‡•§',
  execute(api, threadID, args, event, botState = {}, isMaster = false) {
    console.log(`[DEBUG] nicklock command: args=${args.join(' ')}, threadID=${threadID}, senderID=${event.senderID}`);
    
    botState.adminList = botState.adminList || [];
    const isAdmin = botState.adminList.includes(event.senderID) || isMaster;
    if (!isAdmin) {
      sendMessageWithCooldown(api, threadID, 'üö´ ‡§Ø‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§®‡•ç‡§∏ ‡§Ø‡§æ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à!');
      console.log(`[DEBUG] Command rejected: Sender ${event.senderID} is not admin/master`);
      return;
    }

    if (args.length < 2) {
      sendMessageWithCooldown(api, threadID, '‡§â‡§™‡§Ø‡•ã‡§ó: #nicklock on <nickname> ‡§Ø‡§æ #nicklock on @user <nickname> ‡§Ø‡§æ #nicklock off ‡§Ø‡§æ #nicklock off @user');
      console.log('[DEBUG] Command rejected: Insufficient arguments');
      return;
    }

    const command = args[0].toLowerCase(); // Fix: args[0] is the subcommand like 'on' or 'off'
    let targetID = Object.keys(event.mentions)[0] || null;
    let nickname = '';

    // Parse nickname correctly
    if (targetID && command === 'on') {
      // If mention present, nickname starts after mention
      const mentionArg = args.find(arg => arg.startsWith('@'));
      const mentionIndex = args.indexOf(mentionArg);
      if (mentionIndex === -1 || mentionIndex < 1) {
        sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•á‡§Ç: #nicklock on @user <nickname>');
        console.log('[DEBUG] Command rejected: Invalid mention format');
        return;
      }
      nickname = args.slice(mentionIndex + 1).join(' ').trim();
    } else if (command === 'on') {
      // No mention, group-wide, nickname from args[1] onwards
      nickname = args.slice(1).join(' ').trim();
    } else if (command === 'off') {
      // For off, no nickname needed
      nickname = '';
    } else {
      sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ó‡§≤‡§§ ‡§ï‡§Æ‡§æ‡§Ç‡§°: on ‡§Ø‡§æ off ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§');
      return;
    }

    try {
      botState.nicknameQueues = botState.nicknameQueues || {};
      botState.lockedNicknames = botState.lockedNicknames || {};
      botState.lastNicknameChange = botState.lastNicknameChange || {};

      // Early admin permission check
      api.getThreadInfo(threadID, (err, info) => {
        if (err || !info) {
          sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
          return;
        }
        if (!info.adminIDs.some(admin => admin.id === api.getCurrentUserID())) {
          sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§∞‡§Æ‡§ø‡§∂‡§® ‡§ö‡§æ‡§π‡§ø‡§è‡•§');
          console.log('[DEBUG] Bot lacks admin permissions');
          return;
        }

        if (command === 'on' && !targetID) {
          // Group-wide nickname lock
          if (!nickname || nickname.length === 0) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§≤‡§ø‡§° ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§™‡•ç‡§∞‡•ã‡§µ‡§æ‡§á‡§° ‡§ï‡§∞‡•á‡§Ç‡•§');
            console.log('[DEBUG] Command rejected: Invalid or empty nickname');
            return;
          }

          botState.nicknameQueues[threadID] = {
            active: true,
            nickname: nickname,
            changedUsers: new Set(),
            interval: 20000,
            botUserId: api.getCurrentUserID()
          };
          console.log(`[DEBUG] Group-wide lock activated: nickname="${nickname}"`);

          sendMessageWithCooldown(api, threadID, '‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§Ö‡§¨ ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤ ‡§¶‡•Ç‡§Ç‡§ó‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§ú‡•ç‡§û‡§æ ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§®‡§æ ‡§Æ‡•á‡§∞‡§æ ‡§´‡§∞‡•ç‡§ú ‡§π‡•à');

          ensureThreadHasMessage(api, threadID, () => {
            api.getThreadInfo(threadID, (err, info) => {
              if (err || !info || !info.participantIDs) {
                sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
                console.log(`[DEBUG] Error fetching thread info for threadID=${threadID}: ${err?.message || 'Unknown error'}`);
                return;
              }

              const botID = api.getCurrentUserID();
              const members = info.participantIDs.filter(id => id !== botID);
              console.log(`[DEBUG] Processing ${members.length} members for group-wide nickname lock`);

              let completed = 0;
              let i = 0;
              const changeNext = () => {
                if (i >= members.length || !botState.nicknameQueues[threadID]?.active) {
                  if (completed === members.length && botState.nicknameQueues[threadID]?.active) {
                    sendMessageWithCooldown(api, threadID, '‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡§¨ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤ ‡§¶‡§ø‡§è ‡§ú‡§¨ ‡§§‡§ï ‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•á ‡§¶‡§æ‡§∏ ‡§π‡•à ‡§§‡§¨ ‡§§‡§ï ‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§ö ‡§∏‡§ï‡§§‡§æ');
                    console.log('[DEBUG] All nicknames changed for group-wide lock');
                  }
                  return;
                }

                const memberID = members[i];
                const lastChange = botState.lastNicknameChange[`${threadID}:${memberID}`] || 0;
                if (Date.now() - lastChange < 20000) {
                  console.log(`[DEBUG] Skipped nickname change for ${memberID} due to cooldown`);
                  i++;
                  setTimeout(changeNext, 20000);
                  return;
                }

                retryNicknameChange(api, threadID, memberID, nickname, 3, (success) => { // Increased retry to 3 for better handling
                  if (success) {
                    botState.nicknameQueues[threadID].changedUsers.add(memberID);
                    botState.lastNicknameChange[`${threadID}:${memberID}`] = Date.now();
                    console.log(`[DEBUG] Set nickname for memberID=${memberID} to "${nickname}"`);
                    completed++;
                  } else {
                    console.log(`[DEBUG] Failed to set nickname for ${memberID} after retries`);
                  }
                  i++;
                  setTimeout(changeNext, 20000);
                });
              };
              changeNext();
            });
          });
        } else if (command === 'on' && targetID) {
          // Specific user nickname lock
          if (!nickname || nickname.length === 0) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§≤‡§ø‡§° ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§™‡•ç‡§∞‡•ã‡§µ‡§æ‡§á‡§° ‡§ï‡§∞‡•á‡§Ç‡•§');
            console.log('[DEBUG] Command rejected: Invalid or empty nickname');
            return;
          }

          botState.lockedNicknames[threadID] = botState.lockedNicknames[threadID] || {};

          api.getUserInfo([targetID], (err, ret) => {
            if (err || !ret || !ret[targetID]) {
              sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
              console.log(`[DEBUG] Error fetching user info for userID=${targetID}: ${err?.message || 'Unknown error'}`);
              return;
            }

            const name = ret[targetID].name || 'User';
            botState.lockedNicknames[threadID][targetID] = nickname;
            console.log(`[DEBUG] Locked nickname for userID=${targetID} to "${nickname}"`);

            const lastChange = botState.lastNicknameChange[`${threadID}:${targetID}`] || 0;
            if (Date.now() - lastChange < 20000) {
              sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•Ç‡§≤‡§°‡§æ‡§â‡§®: 20 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
              console.log(`[DEBUG] Skipped nickname change for ${targetID} due to cooldown`);
              return;
            }

            retryNicknameChange(api, threadID, targetID, nickname, 3, (success) => { // Increased retry
              if (success) {
                sendMessageWithCooldown(api, threadID, `‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§ú‡•ç‡§û‡§æ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Æ‡•à‡§Ç‡§®‡•á ${name} ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ "${nickname}" ‡§™‡§∞ ‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ`);
                botState.lastNicknameChange[`${threadID}:${targetID}`] = Date.now();
                console.log(`[DEBUG] Successfully locked nickname for ${name} (${targetID}) to "${nickname}"`);
              } else {
                sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤ (API ‡§á‡§∂‡•ç‡§Ø‡•Ç)‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
                console.log(`[DEBUG] Error setting nickname for userID=${targetID}`);
              }
            });
          });
        } else if (command === 'off' && !targetID) {
          // Group-wide nickname unlock
          if (!botState.nicknameQueues?.[threadID]?.active) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•à‡•§');
            console.log('[DEBUG] Command rejected: Group-wide nickname lock already off');
            return;
          }

          botState.nicknameQueues[threadID].active = false;
          botState.nicknameQueues[threadID].changedUsers.clear();
          if (botState.nicknameTimers?.[threadID]) {
            clearTimeout(botState.nicknameTimers[threadID]);
            delete botState.nicknameTimers[threadID];
          }
          delete botState.nicknameQueues[threadID];
          console.log(`[DEBUG] Group-wide nickname lock deactivated and cleared`);
          sendMessageWithCooldown(api, threadID, '‡§Ü‡§™‡§ï‡§æ ‡§Ü‡§¶‡•á‡§∂ ‡§∏‡§∞ ‡§Ü‡§Ç‡§ñ‡•ã‡§Ç ‡§™‡§∞ ‡§Æ‡•á‡§∞‡•á ‡§Æ‡§æ‡§≤‡§ø‡§ï');
        } else if (command === 'off' && targetID) {
          // Specific user nickname unlock
          if (!botState.lockedNicknames?.[threadID]?.[targetID]) {
            sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§');
            console.log(`[DEBUG] Command rejected: No nickname lock for userID=${targetID}`);
            return;
          }

          api.getUserInfo([targetID], (err, ret) => {
            if (err || !ret || !ret[targetID]) {
              sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§');
              console.log(`[DEBUG] Error fetching user info for userID=${targetID}: ${err?.message || 'Unknown error'}`);
              return;
            }
            const name = ret[targetID].name || 'User';
            delete botState.lockedNicknames[threadID][targetID];
            if (Object.keys(botState.lockedNicknames[threadID]).length === 0) {
              delete botState.lockedNicknames[threadID];
            }
            console.log(`[DEBUG] Removed nickname lock for userID=${targetID}`);
            sendMessageWithCooldown(api, threadID, `‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§Ü‡§™‡§ï‡•á ‡§Ü‡§¶‡•á‡§∂ ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§Æ‡•à‡§Ç ${name} ‡§ï‡•ã ‡§¨‡§ñ‡•ç‡§∂ ‡§∞‡§π‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤‡§®‡§æ ‡§¨‡§Ç‡§¶`);
          });
        } else {
          sendMessageWithCooldown(api, threadID, '‡§â‡§™‡§Ø‡•ã‡§ó: #nicklock on <nickname> ‡§Ø‡§æ #nicklock on @user <nickname> ‡§Ø‡§æ #nicklock off ‡§Ø‡§æ #nicklock off @user');
          console.log('[DEBUG] Command rejected: Invalid command');
        }
      });
    } catch (e) {
      console.error(`[ERROR] nicklock error: ${e?.message || 'Unknown error'}`);
      sendMessageWithCooldown(api, threadID, '‚ö†Ô∏è ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•Å‡§à, ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
    }
  }
};
